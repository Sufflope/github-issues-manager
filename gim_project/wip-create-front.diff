diff --git a/gim_project/core/models.py b/gim_project/core/models.py
index e52e5ad..c8180a8 100644
--- a/gim_project/core/models.py
+++ b/gim_project/core/models.py
@@ -84,7 +84,7 @@ class GithubObject(models.Model):
         """
         return self.fetch(auth, force_fetch=force_fetch)
 
-    def _fetch_many(self, field_name, auth, vary=None, defaults=None, force_fetch=False):
+    def _fetch_many(self, field_name, auth, vary=None, defaults=None, parameters=None, force_fetch=False):
         """
         Fetch data from github for the given m2m or related field.
         If defined, "vary" is a dict of list of parameters to fetch. For each
@@ -163,22 +163,24 @@ class GithubObject(models.Model):
 
         if not vary:
             # no varying parameter, fetch with an empty set of parameters
-            parameters_dicts = [{}]
+            parameters_combinations = [{}]
         else:
             # create all combinations of varying parameters
             vary_keys = sorted(vary)
-            parameters_dicts = [dict(zip(vary_keys, prod)) for prod in product(*(vary[key] for key in vary_keys))]
+            parameters_combinations = [dict(zip(vary_keys, prod)) for prod in product(*(vary[key] for key in vary_keys))]
 
         # add per_page option
-        for parameters in parameters_dicts:
-            parameters.update({'per_page': 100})
+        for parameters_combination in parameters_combinations:
+            parameters_combination.update({'per_page': 10})
+            if parameters:
+                parameters_combination.update(parameters)
 
         # fetch data for each combination of varying parameters
         status = {'ok': 0, 304: 0}
         restart_withouht_if_modified_since = False
-        for parameters in parameters_dicts:
+        for parameters_combination in parameters_combinations:
             try:
-                page_parameters = parameters.copy()
+                page_parameters = parameters_combination.copy()
                 while True:
                     page_parameters = fetch_page_and_next(objs, page_parameters)
                     if page_parameters is None:
@@ -209,8 +211,12 @@ class GithubObject(models.Model):
             status = {'ok': 0, 304: 0}
             request_headers = self._prepare_fetch_headers(if_modified_since=None)
             objs = []
-            for parameters in parameters_dicts:
-                fetch_page_and_next(objs, parameters)
+            for parameters_combination in parameters_combinations:
+                page_parameters = parameters_combination.copy()
+                while True:
+                    page_parameters = fetch_page_and_next(objs, page_parameters)
+                    if page_parameters is None:
+                        break
 
         # now update the list with created/updated objects
         if not status[304]:
@@ -390,6 +396,7 @@ class Repository(GithubObjectWithId):
         return self._fetch_many('issues', auth,
                                 vary={'state': ('open', 'closed')},
                                 defaults={'fk': {'repository': self}},
+                                parameters={'sort': 'updated', 'direction': 'desc'},
                                 force_fetch=force_fetch)
 
     @property
@@ -401,6 +408,7 @@ class Repository(GithubObjectWithId):
     def fetch_comments(self, auth, force_fetch=False):
         return self._fetch_many('comments', auth,
                                 defaults={'fk': {'repository': self}},
+                                parameters={'sort': 'updated', 'direction': 'desc'},
                                 force_fetch=force_fetch)
 
     def fetch_all(self, auth, force_fetch=False):
diff --git a/gim_project/front/__init__.py b/gim_project/front/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/gim_project/front/dashboard/__init__.py b/gim_project/front/dashboard/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/gim_project/front/dashboard/models.py b/gim_project/front/dashboard/models.py
new file mode 100644
index 0000000..e69de29
diff --git a/gim_project/front/dashboard/urls.py b/gim_project/front/dashboard/urls.py
new file mode 100644
index 0000000..4e65aa0
--- /dev/null
+++ b/gim_project/front/dashboard/urls.py
@@ -0,0 +1,7 @@
+from django.conf.urls import patterns, url
+
+from .views import DashboardView
+
+urlpatterns = patterns('',
+    url(r'^$', DashboardView.as_view(), name='dashboard'),
+)
diff --git a/gim_project/front/dashboard/views.py b/gim_project/front/dashboard/views.py
new file mode 100644
index 0000000..7119b4f
--- /dev/null
+++ b/gim_project/front/dashboard/views.py
@@ -0,0 +1,5 @@
+from ..views import BaseRepositoryView
+
+
+class DashboardView(BaseRepositoryView):
+    pass
diff --git a/gim_project/front/issues/__init__.py b/gim_project/front/issues/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/gim_project/front/issues/models.py b/gim_project/front/issues/models.py
new file mode 100644
index 0000000..e69de29
diff --git a/gim_project/front/issues/urls.py b/gim_project/front/issues/urls.py
new file mode 100644
index 0000000..0241f38
--- /dev/null
+++ b/gim_project/front/issues/urls.py
@@ -0,0 +1,7 @@
+from django.conf.urls import patterns, url
+
+from .views import IssuesView
+
+urlpatterns = patterns('',
+    url(r'^$', IssuesView.as_view(), name='issues'),
+)
diff --git a/gim_project/front/issues/views.py b/gim_project/front/issues/views.py
new file mode 100644
index 0000000..89fed50
--- /dev/null
+++ b/gim_project/front/issues/views.py
@@ -0,0 +1,5 @@
+from ..views import BaseRepositoryView
+
+
+class IssuesView(BaseRepositoryView):
+    pass
diff --git a/gim_project/front/models.py b/gim_project/front/models.py
new file mode 100644
index 0000000..e69de29
diff --git a/gim_project/front/repository_urls.py b/gim_project/front/repository_urls.py
new file mode 100644
index 0000000..0c96f7b
--- /dev/null
+++ b/gim_project/front/repository_urls.py
@@ -0,0 +1,10 @@
+from django.conf.urls import patterns, include
+from django.views.generic.base import RedirectView
+
+urlpatterns = patterns('',
+    (r'^$', RedirectView.as_view(url='dashboard')),
+    (r'^dashboard/$', include('front.dashboard.urls')),
+    (r'^issues/$', include('front.issues.urls')),
+    (r'^worflow/$', include('front.workflow.urls')),
+    (r'^timeline/$', include('front.timeline.urls')),
+)
diff --git a/gim_project/front/templates/front/sample.html b/gim_project/front/templates/front/sample.html
new file mode 100644
index 0000000..b5a8b10
--- /dev/null
+++ b/gim_project/front/templates/front/sample.html
@@ -0,0 +1 @@
+hello, welcome to {{ repository }}
diff --git a/gim_project/front/timeline/__init__.py b/gim_project/front/timeline/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/gim_project/front/timeline/models.py b/gim_project/front/timeline/models.py
new file mode 100644
index 0000000..e69de29
diff --git a/gim_project/front/timeline/urls.py b/gim_project/front/timeline/urls.py
new file mode 100644
index 0000000..450128d
--- /dev/null
+++ b/gim_project/front/timeline/urls.py
@@ -0,0 +1,7 @@
+from django.conf.urls import patterns, url
+
+from .views import TimelineView
+
+urlpatterns = patterns('',
+    url(r'^$', TimelineView.as_view(), name='timeline'),
+)
diff --git a/gim_project/front/timeline/views.py b/gim_project/front/timeline/views.py
new file mode 100644
index 0000000..bbbb9c7
--- /dev/null
+++ b/gim_project/front/timeline/views.py
@@ -0,0 +1,5 @@
+from ..views import BaseRepositoryView
+
+
+class TimelineView(BaseRepositoryView):
+    pass
diff --git a/gim_project/front/urls.py b/gim_project/front/urls.py
new file mode 100644
index 0000000..5955655
--- /dev/null
+++ b/gim_project/front/urls.py
@@ -0,0 +1,5 @@
+from django.conf.urls import patterns, include, url
+
+urlpatterns = patterns('',
+    url(r'^(?P<owner_username>[^/]+)/(?P<repository_name>[^/]+)/', include('front.repository_urls'))
+)
diff --git a/gim_project/front/views.py b/gim_project/front/views.py
new file mode 100644
index 0000000..9f946e1
--- /dev/null
+++ b/gim_project/front/views.py
@@ -0,0 +1,26 @@
+from django.views.generic import DetailView
+from django.shortcuts import get_object_or_404
+
+from core.models import Repository
+
+
+class BaseRepositoryView(DetailView):
+    model = Repository
+    template_name = 'front/sample.html'
+    context_object_name = 'repository'
+
+    def get_object(self, queryset=None):
+        if queryset is None:
+            queryset = self.get_queryset()
+
+        owner_username = self.kwargs['owner_username']
+        repository_name = self.kwargs['repository_name']
+
+        filters = {
+            'owner__username': owner_username,
+            'name': repository_name
+        }
+
+        repository = get_object_or_404(queryset, **filters)
+
+        return repository
diff --git a/gim_project/front/workflow/__init__.py b/gim_project/front/workflow/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/gim_project/front/workflow/models.py b/gim_project/front/workflow/models.py
new file mode 100644
index 0000000..e69de29
diff --git a/gim_project/front/workflow/urls.py b/gim_project/front/workflow/urls.py
new file mode 100644
index 0000000..54159e9
--- /dev/null
+++ b/gim_project/front/workflow/urls.py
@@ -0,0 +1,7 @@
+from django.conf.urls import patterns, url
+
+from .views import WorkflowView
+
+urlpatterns = patterns('',
+    url(r'^$', WorkflowView.as_view(), name='workflow'),
+)
diff --git a/gim_project/front/workflow/views.py b/gim_project/front/workflow/views.py
new file mode 100644
index 0000000..2949316
--- /dev/null
+++ b/gim_project/front/workflow/views.py
@@ -0,0 +1,5 @@
+from ..views import BaseRepositoryView
+
+
+class WorkflowView(BaseRepositoryView):
+    pass
diff --git a/gim_project/gim_project/settings.py b/gim_project/gim_project/settings.py
index 8e9ebb2..02268fe 100644
--- a/gim_project/gim_project/settings.py
+++ b/gim_project/gim_project/settings.py
@@ -132,6 +132,11 @@ INSTALLED_APPS = (
     # Uncomment the next line to enable admin documentation:
     # 'django.contrib.admindocs',
     'core',
+    'front',
+    'front.dashboard',
+    'front.issues',
+    'front.workflow',
+    'front.timeline',
 )
 
 # A sample logging configuration. The only tangible logging
diff --git a/gim_project/gim_project/urls.py b/gim_project/gim_project/urls.py
index 752c7b5..d6a2f73 100644
--- a/gim_project/gim_project/urls.py
+++ b/gim_project/gim_project/urls.py
@@ -7,7 +7,7 @@ from django.conf.urls import patterns, include, url
 urlpatterns = patterns('',
     # Examples:
     # url(r'^$', 'gim_project.views.home', name='home'),
-    # url(r'^gim_project/', include('gim_project.foo.urls')),
+    url(r'^', include('front.urls')),
 
     # Uncomment the admin/doc line below to enable admin documentation:
     # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),
diff --git a/gim_project/github.py b/gim_project/github.py
index c6a8648..2c24606 100644
--- a/gim_project/github.py
+++ b/gim_project/github.py
@@ -135,6 +135,7 @@ class GitHub(object):
         if method == 'POST':
             data = _encode_json(kw)
         url = '%s%s' % (_URL, path)
+        print 'REQUEST', url, request_headers
         opener = urllib2.build_opener(urllib2.HTTPSHandler)
         request = urllib2.Request(url, data=data, headers=request_headers or {})
         request.get_method = _METHOD_MAP[method]
@@ -147,6 +148,7 @@ class GitHub(object):
             is_json = self._process_resp(response.headers)
             if isinstance(response_headers, dict):
                 response_headers.update(response.headers.dict.copy())
+                print 'RESPONSE', 200, response_headers
             content = response.read()
             if is_json:
                 return _parse_json(content)
@@ -156,6 +158,7 @@ class GitHub(object):
             is_json = self._process_resp(e.headers)
             if isinstance(response_headers, dict):
                 response_headers.update(e.headers.dict.copy())
+                print 'RESPONSE', e.code, response_headers
             if is_json:
                 _json = _parse_json(e.read())
             else:
